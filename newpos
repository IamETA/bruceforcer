
  for (int charcount=1;charcount<=size;charcount++) {
    for (int segment=segment_from;segment<segment_from+count;segment++) {
      testword[0] = bits[segment];

      //Go trough each word
      for(int i=0;i<charcount;i++) {
        for (int x=0;x<bitsize;x++) {
          if (*abort == true) {
            free(testpwd);
            return NULL;
          }
          currenttrip++;
          (*p_status) = (currenttrip / totaltrips) * 100;
          testword[1+i] = bits[x];
          testword[2+i] = '\0';
          if (charcount >= 3) {
              printf("word: %s\n",testword);
          }
          testpwd = crypt_r(testword, p_type_salt, cdata);
          if (strcmp(testpwd, hashedvalue) == 0)
          {
            free(testpwd);
            return testword;
          }  
        };
      }
    }
  }




  for (int charcount=2;charcount<=size;charcount++) {
    for (int segment=segment_from;segment<segment_from+count;segment++) {
      testword[0] = bits[segment];

      //Go trough each word
      for(int i=0;i<charcount;i++) {
        for (int x=0;x<bitsize;x++) {
          if (*abort == true) {
            free(testpwd);
            return NULL;
          }
          currenttrip++;
          (*p_status) = (currenttrip);

          //change the byte and check the results
          testword[i] = bits[x];
          //if (strcmp(testword,"oii") == 0) {
              printf("word: %s\n",testword);
          //}
          testpwd = crypt_r(testword, p_type_salt, cdata);
          if (strcmp(testpwd, hashedvalue) == 0)
          {
            free(testpwd);
            return testword;
          }  
        };
      }
    }
  }